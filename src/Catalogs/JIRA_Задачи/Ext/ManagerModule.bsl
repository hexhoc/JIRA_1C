#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс


Функция НайтиСоздатьЗадачу(ДанныеЗадачи, ПринудительнаяЗагрузка) Экспорт
	
		ДатаИзмененияЗагружаемого = JIRA_ВзаимодействиеCJIRAКлиентСервер.ПреобразоватьВДату(ДанныеЗадачи["fields"]["updated"]);
		
		ЗадачаСсылка = Справочники.JIRA_Задачи.НайтиПоКоду(ДанныеЗадачи["key"]);
		Если ЗадачаСсылка.Пустая() Тогда
			ЗадачаОбъект = Справочники.JIRA_Задачи.СоздатьЭлемент();
			ЗадачаОбъект.Код = ДанныеЗадачи["key"];
		Иначе
			//Обновляем только те задачи которые были изменены
			//Если дата изменения загружаемого пустая, значит это задача пустышка подтянутая по ссылке из другой задачи
			ДатаИзмененияТекущая = ЗадачаСсылка.ДатаИзменения;
			Если (ДатаИзмененияЗагружаемого > ДатаИзмененияТекущая)
				ИЛИ (ПринудительнаяЗагрузка И ДатаИзмененияЗагружаемого <> Дата(1,1,1)) Тогда
				ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
			Иначе
				Возврат ЗадачаСсылка;				
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьДанныеЗадачи(ЗадачаОбъект, ДанныеЗадачи, ПринудительнаяЗагрузка);
		ЗадачаСсылка = ЗадачаОбъект.Ссылка;
		

		Возврат ЗадачаСсылка;
	
КонецФункции

Процедура ОбновитьДанныеЗадачи(ЗадачаОбъект, ДанныеЗадачи, ПринудительнаяЗагрузка)
	
	Если ЗадачаОбъект.ЭтоНовый() Тогда
		ЗадачаСсылка = Справочники.JIRA_Задачи.ПолучитьСсылку(Новый УникальныйИдентификатор);
		ЗадачаОбъект.УстановитьСсылкуНового(ЗадачаСсылка);
	Иначе
		ЗадачаСсылка = ЗадачаОбъект.Ссылка;
	КонецЕсли;
	
	ПоляЗадачи = ДанныеЗадачи["fields"];
	
	//ПОИСК ССЫЛОЧНЫХ ОБЪЕКТОВ
	АвторСсылка 		= Справочники.Сотрудники.JIRA_НайтиСоздатьСотрудника(ПоляЗадачи["reporter"]);
	ИсполнительСсылка 	= Справочники.Сотрудники.JIRA_НайтиСоздатьСотрудника(ПоляЗадачи["assignee"]);
	СтатусСсылка 		= Справочники.JIRA_Статусы.НайтиСоздатьСтатус(ПоляЗадачи["status"]);
	ПриоритетыСсылка 	= Справочники.JIRA_Приоритеты.НайтиСоздатьПриоритет(ПоляЗадачи["priority"]);
	ТипЗапросаСсылка 	= Справочники.JIRA_ТипЗапроса.НайтиСоздатьТипЗапроса(ПоляЗадачи["issuetype"]);
	ПроектСсылка		= Справочники.JIRA_Проекты.НайтиСоздатьПроект(ПоляЗадачи["project"]);
	//Кастомные поля
	//Если ПоляЗадачи["customfield_10510"] <> Неопределено Тогда 
	//	ГруппаОтветственныхСсылка = Справочники.JIRA_ГруппаОтветственных.НайтиСоздатьГруппуОтветственных(ПоляЗадачи["customfield_10510"]);
	//Иначе
	//	ГруппаОтветственныхСсылка = Справочники.JIRA_ГруппаОтветственных.ПустаяСсылка();
	//КонецЕсли;
	Если ПоляЗадачи["parent"] <> Неопределено Тогда
		РодительСсылка = НайтиСоздатьЗадачу(ПоляЗадачи["parent"], ПринудительнаяЗагрузка);
	Иначе
		РодительСсылка = Справочники.JIRA_Задачи.ПустаяСсылка();
	КонецЕсли;
	
	////проверяем статус и устанавливаем дату закрытия
	//Если ЗадачаОбъект.Статус = СтатусСсылка Тогда
	//	ДатаРешения =ЗадачаОбъект.ДатаРешения;
	//Иначе
	//	КатегорияСтатуса = СтатусСсылка.КатегорияСтатуса;
	//	Если КатегорияСтатуса.Ключ = "done" Тогда
	//		ДатаРешения = JIRA_ВзаимодействиеC_JIRA_КлиентСервер.ПреобразоватьВДату(ПоляЗадачи["updated"]);
	//	Иначе
	//		ДатаРешения =ЗадачаОбъект.ДатаРешения;
	//	КонецЕсли;
	//КонецЕсли;
	
	ДатаСоздания 			= JIRA_ВзаимодействиеCJIRAКлиентСервер.ПреобразоватьВДату(ПоляЗадачи["created"]);
	ДатаИзменения 			= JIRA_ВзаимодействиеCJIRAКлиентСервер.ПреобразоватьВДату(ПоляЗадачи["updated"]);
	//Используем наш самодельный реквизит вместо типового реквизита duedate (срок исполнения). Срок исполнения доступен не для всех задач
	//ПлановаяДатаЗавершения 	= JIRA_ВзаимодействиеC_JIRA_КлиентСервер.ПреобразоватьВДату(ПоляЗадачи["duedate"]);
	ПлановаяДатаЗавершения 	= JIRA_ВзаимодействиеCJIRAКлиентСервер.ПреобразоватьВДату(ПоляЗадачи["customfield_11501"]);
	//	
	
	//ЗАПОЛНЕНИЕ ЗАДАЧИ
	ЗадачаОбъект.Наименование 			= ПоляЗадачи["summary"];
	ЗадачаОбъект.Описание 				= ПоляЗадачи["description"];
	ЗадачаОбъект.Проект 				= ПроектСсылка;
	ЗадачаОбъект.ТипЗапроса 			= ТипЗапросаСсылка;
	ЗадачаОбъект.Статус 				= СтатусСсылка;
	ЗадачаОбъект.Приоритет 				= ПриоритетыСсылка;
	ЗадачаОбъект.Исполнитель 			= ИсполнительСсылка;
	ЗадачаОбъект.Автор 					= АвторСсылка;
	ЗадачаОбъект.Родитель				= РодительСсылка;
	ЗадачаОбъект.ДатаСоздания 			= ДатаСоздания;
	ЗадачаОбъект.ДатаИзменения 			= ДатаИзменения;
	//ЗадачаОбъект.ДатаРешения			= ДатаРешения;
	ЗадачаОбъект.ПлановаяДатаЗавершения = ПлановаяДатаЗавершения;
	
	//УЧЕТ ВРЕМЕНИ
	ЗадачаОбъект.ЗатраченоВремени 							= ПоляЗадачи["timespent"];
	ЗадачаОбъект.ПервоначальнаяОценкаВремени 				= ПоляЗадачи["timeoriginalestimate"];
	ЗадачаОбъект.ОценкаВремени 								= ПоляЗадачи["timeestimate"];
	ЗадачаОбъект.ЗатраченоВремениСПодзадачами 				= ПоляЗадачи["aggregatetimespent"];
	ЗадачаОбъект.ПервоначальнаяОценкаВремениСПодзадачами 	= ПоляЗадачи["aggregatetimeoriginalestimate"];
	ЗадачаОбъект.ОценкаВремениСПодзадачами 					= ПоляЗадачи["aggregatetimeestimate"];
	
	Если ПоляЗадачи["labels"] <> Неопределено Тогда
		ЗадачаОбъект.Метка = "";
		Для Каждого Метка из ПоляЗадачи["labels"] цикл 
			ЗадачаОбъект.Метка = ЗадачаОбъект.Метка + ?(ПустаяСтрока(ЗадачаОбъект.Метка), "", ";") + Метка;
		КонецЦикла;
	КонецЕсли;
	
	ЗадачаОбъект.СвязанныеЗадачи.Очистить();
	СвязанныеЗадачи = ПоляЗадачи["issuelinks"];
	Если СвязанныеЗадачи <> Неопределено Тогда
		Для каждого СвязаннаяЗадача из СвязанныеЗадачи цикл			
			ТипСвязиСсылка = Справочники.JIRA_ТипыСвязейЗадач.НайтиСоздатьТипСвязиЗадач(СвязаннаяЗадача["type"]);
			Если НЕ СвязаннаяЗадача["inwardIssue"] = Неопределено Тогда
				СвязаннаяЗадачаСсылка = НайтиСоздатьЗадачу(СвязаннаяЗадача["inwardIssue"], ПринудительнаяЗагрузка);
				ОтношениеСвязи = Перечисления.JIRA_ОтношенияСвязиЗадач.Внутренняя;
			Иначе
				СвязаннаяЗадачаСсылка = НайтиСоздатьЗадачу(СвязаннаяЗадача["outwardIssue"], ПринудительнаяЗагрузка);
				ОтношениеСвязи = Перечисления.JIRA_ОтношенияСвязиЗадач.Внешняя;
			КонецЕсли;
			НоваяСтрокаСвязаннаяЗадача = ЗадачаОбъект.СвязанныеЗадачи.Добавить();
			НоваяСтрокаСвязаннаяЗадача.СвязаннаяЗадача = СвязаннаяЗадачаСсылка;
			НоваяСтрокаСвязаннаяЗадача.ТипСвязи = ТипСвязиСсылка;
			НоваяСтрокаСвязаннаяЗадача.ОтношениеСвязи = ОтношениеСвязи; 
		КонецЦикла;
	КонецЕсли;
	
	//TODO Нужно заранее установить ссылку для нового, и в транзакции записывать все данные, и уже после того как все операции выполнены
	//Записывать задачу
	
	//Если дата изменения пустая, значит заявка просто подгружена по ссылке (с ограниченным набором полей)
	//Либо мы получаем по ней данные отдельным запросом (Процедура ПолучитьДанныеПоЗадаче()) и обновляем текущее состояние, 
	//либо пропускаем, возможно эта задача есть в общем списке загружаемых задач, тогда автоматические подтянутся все поля
	
	ОбновитьИсториюИзмененияСтатусов(ЗадачаОбъект, ЗадачаСсылка, ДанныеЗадачи["changelog"]);
	Если ЗадачаОбъект.ДатаИзменения > Дата(1,1,1) Тогда
		ОбновитьИсториюИзмененияСостояний(ЗадачаОбъект, ЗадачаСсылка);
	КонецЕсли;
	
	Если ПоляЗадачи["timespent"] <> Неопределено И ПоляЗадачи["timespent"] > 0 Тогда
		ВыполнитьЗагрузкуЖурналаРабот(ЗадачаОбъект, ЗадачаСсылка);
	КонецЕсли;
	
	ЗадачаОбъект.Записать();

КонецПроцедуры

Процедура ОбновитьИсториюИзмененияСтатусов(ЗадачаОбъект, ЗадачаСсылка, Лог)
	
	Если Лог = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Набор = РегистрыСведений.JIRA_ИсторияИзмененияСтатусов.СоздатьНаборЗаписей();
	Набор.Отбор.Задача.Установить(ЗадачаСсылка);
	
	Для Каждого ЗаписьЛога Из Лог["histories"] Цикл
		Для Каждого Изменение Из ЗаписьЛога["items"] Цикл
			Если НРег(Изменение["field"]) <> "status" Тогда
				Продолжить;	
			КонецЕсли;
			
			Запись = Набор.Добавить();
			//Запись.НомерЗаписи = Набор.Количество();
			Запись.Задача = ЗадачаСсылка;
			Запись.Автор = Справочники.Сотрудники.JIRA_НайтиСоздатьСотрудника(ЗаписьЛога["author"]);
			Запись.ДатаСобытия = JIRA_ВзаимодействиеCJIRAКлиентСервер.ПреобразоватьВДату(ЗаписьЛога["created"]);
			Запись.НомерЗаписи = Набор.Количество();
			ДанныеИсходногоСтатуса = Новый Соответствие();
			ДанныеИсходногоСтатуса.Вставить("id", Изменение["from"]);
			ДанныеИсходногоСтатуса.Вставить("name", Изменение["fromString"]);
			ДанныеИсходногоСтатуса.Вставить("description", Неопределено);
			ДанныеИсходногоСтатуса.Вставить("statusCategory", Неопределено);
			Запись.ИсходныйСтатус = Справочники.JIRA_Статусы.НайтиСоздатьСтатус(ДанныеИсходногоСтатуса);
			
			ДанныеКонечногоСтатуса = Новый Соответствие();
			ДанныеКонечногоСтатуса.Вставить("id", Изменение["to"]);
			ДанныеКонечногоСтатуса.Вставить("name", Изменение["toString"]);
			ДанныеКонечногоСтатуса.Вставить("description", Неопределено);
			ДанныеКонечногоСтатуса.Вставить("statusCategory", Неопределено);
			Запись.КонечныйСтатус = Справочники.JIRA_Статусы.НайтиСоздатьСтатус(ДанныеКонечногоСтатуса);
			
		КонецЦикла;
	КонецЦикла;
	
	ДатаСоздания = ЗадачаОбъект.ДатаСоздания;
	
	ТЗ = Набор.Выгрузить();
	ТЗ.Сортировать("ДатаСобытия");
	Для а = 0 По ТЗ.Количество()-1 Цикл
		Если а = 0 Тогда // Первая запись
			ТЗ[а].МинутПробылВИсходномСтатусе = (ТЗ[а].ДатаСобытия - ДатаСоздания) / 60;
		Иначе 
			ТЗ[а].МинутПробылВИсходномСтатусе = (ТЗ[а].ДатаСобытия - ТЗ[а-1].ДатаСобытия) / 60;	
		КонецЕсли;
	КонецЦикла;
	
	Если ТЗ.Количество() > 0 Тогда
		ПоследняяЗапись = ТЗ[ТЗ.Количество()-1];
		Если ПоследняяЗапись.КонечныйСтатус.КатегорияСтатуса.Ключ = "done" Тогда
			ЗадачаОбъект.ДатаРешения = ПоследняяЗапись.ДатаСобытия;
		КонецЕсли;
	КонецЕсли;
	
	Набор.Загрузить(ТЗ);
	Набор.Записать(Истина);
	
КонецПроцедуры

Процедура ОбновитьИсториюИзмененияСостояний(ЗадачаОбъект, ЗадачаСсылка)
	
	МенеджерЗаписи = РегистрыСведений.JIRA_ИсторияСостоянийЗадач.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ЗадачаОбъект.ДатаИзменения;
	МенеджерЗаписи.Задача = ЗадачаСсылка;
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЗадачаОбъект);
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуЖурналаРабот(ЗадачаОбъект, ЗадачаСсылка)
	
	ЖурналРабот = JIRA_ВзаимодействиеCJIRAКлиентСервер.ПолучитьЛогСписанийПоЗадаче(ЗадачаОбъект.Код);
	
	НаборЗаписей = РегистрыСведений.JIRA_ЖурналРабот.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Задача.Установить(ЗадачаСсылка);
	НаборЗаписей.Записать();
	
	Для Каждого ЗаписьОРаботе из ЖурналРабот цикл
		МенеджерЗаписи = РегистрыСведений.JIRA_ЖурналРабот.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ДатаСоздания 	= JIRA_ВзаимодействиеCJIRAКлиентСервер.ПреобразоватьВДату(ЗаписьОРаботе["started"]);
		МенеджерЗаписи.Задача 			= ЗадачаСсылка;
		МенеджерЗаписи.ID 				= ЗаписьОРаботе["id"];
		МенеджерЗаписи.ЗатраченоВремени = ЗаписьОРаботе["timeSpentSeconds"];
		МенеджерЗаписи.Комментарий 		= ЗаписьОРаботе["comment"];
		МенеджерЗаписи.Автор 			= Справочники.Сотрудники.JIRA_НайтиСоздатьСотрудника(ЗаписьОРаботе["author"]);
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиСобытий
	
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#КонецЕсли

